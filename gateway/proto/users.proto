syntax = "proto3";

package proto;

option go_package = "internal/proto";

message User {
  string id = 1;
  string email = 2;
  string password = 3;
  string profile_name = 4;
  bool confirmed = 5;
  string role = 6;
  bool is_blocked = 7;
}

message GetUserByIDRequest {
  string id = 1;
}

message GetUsersRequest {
  int32 page = 1;
  int32 limit = 2;
}

message CreateUserRequest {
  string email = 1;
  string profile_name = 2;
  string password = 3;
  bool confirmed = 4;
  string role = 5;
}

message UpdateUserRequest {
  string id = 1;
  string profile_name = 2;
  string password = 3;
}

message DeleteUserRequest {
  string id = 1;
}

message GetUserByIDResponse {
  User user = 1;
}

message GetUsersResponse {
  repeated User users = 1;
}

message DeleteUserResponse {
  bool success = 1;
}

message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  string access_token = 1;
  string refresh_token = 2;
}

message RefreshTokenRequest {
  string refresh_token = 1;
}

message RefreshTokenResponse {
  string access_token = 1;
  string refresh_token = 2;
}

message ValidateTokenRequest {
  string access_token = 1;
}

message ValidateTokenResponse {
  bool valid = 1;
  string user_id = 2;
}

service UserService {
  rpc GetUserByID(GetUserByIDRequest) returns (GetUserByIDResponse);
  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse);
  rpc CreateUser(CreateUserRequest) returns (User);
  rpc UpdateUser(UpdateUserRequest) returns (User);
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  rpc Login(LoginRequest) returns (LoginResponse);
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
}
